runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
getPaths(1,2)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
library(WheresCroc)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
edges
library(WheresCroc)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
new_f
max(new_f)
which.max(new_f)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
positions
positions
dets
dest
edges
new_f
library(WheresCroc)
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
neighbors
prev_f
probs
new_f
dest
shortest_path
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
library(WheresCroc)
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
dest
shortest_path
positions
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
shortest_path
dest
shortest_path
shortest_path
shortest_path
shortest_path
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
dest
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
Q
library(WheresCroc)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
getOptions(node)
getOptions(node, edges)
library(WheresCroc)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
getOptions(node, edges)
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
getOptions(node, edges)
library(WheresCroc)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
getEmissionVector(observations, probs)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
getEmissionVector(observations, probs)
probs
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
probs
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 1, returnVec = TRUE, n = 500, seed = 21,
timeLimit = 300)
getEmissionVector(observations, probs)
[1,1,1]
t = c(0,40)
t
t = c(0:40)
t
t = c(0:40, 0)
t
t = c(0:40, 0)
t = replicate(0,40)
t
prev_f = replicate(40, 0)
prev_f
prev_f[8] = 9
prev_f
prev_f / sum(prev_f)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
verbose = T, returnMem = F, mem = NA)
prev_f / sum(prev_f)
prev_f / sum(prev_f)
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
prev_f
print(prev_f)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
library(WheresCroc)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
currentNode
new_f
new_f
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
library(WheresCroc)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
prev_list
dest
library(WheresCroc)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
shortest_path
dest
prev_list
point
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
point
prev_list
dest
shortest_path
a = c(1)
a
a[1] = a[-1]
a[1] = NULL
a
a = setdiff(a, c(1))
a
a = c(1)
a=c(1,2,3)
a
a = setdiff(a,2)
a
a = c(a,c(4,5,6))
a
library(WheresCroc)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
library(WheresCroc)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
parents
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
library(WheresCroc)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
parents
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
parents
goal
library(WheresCroc)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
parents
goal
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
goal
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
parents
goal
node
library(WheresCroc)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
node
node
neighbors
library(WheresCroc)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
library(WheresCroc)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
parents
goal
parents
queue
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
parents
library(WheresCroc)
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
parents
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
parents
goal
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(myFunction, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
parents
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
warnings()
library(WheresCroc)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
path
dest
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
parents
goal
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
path
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
library(WheresCroc)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
library(WheresCroc)
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
path
node
goal
dest
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
library(WheresCroc)
debugSource('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
path
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
timeLimit = 300)
runWheresCroc(makeMoves, doPlot = T, showCroc = F, pause = 1,
verbose = T, returnMem = F, mem = NA)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
source('~/ai_programming/WheresCroc/R/WheresCroc.R')
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
timeLimit = 300)
