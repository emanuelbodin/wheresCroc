% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/WheresCroc.R
\name{testWC}
\alias{testWC}
\title{testWC}
\usage{
testWC(myFunction, verbose = 0, returnVec = FALSE, n = 500, seed = 21,
  timeLimit = 300)
}
\arguments{
\item{myFunction}{Your function to be passed to runWheresCroc. See runWheresCroc documentation for details.}

\item{verbose}{Set to 0 for no output, 1 for a summary of the results of the games played (mean,
standard deviation and time taken), and 2 for the above plus written output detailing seeds used and the
runWheresCroc output of the result of each game.}

\item{returnVec}{See return value.}

\item{n}{The number of games to run. In the evaluation this will be 500.}

\item{seed}{The random seed to use. Pass NA to not set a random seed.}

\item{timeLimit}{The time limit. If this is breached, a NA is returned.}
}
\value{
If your function is too slow, NA is returned. Otherwise if returnVec is TRUE, a vector containing
all results is returned. If returnVec is FALSE, the average performance is returned.
}
\description{
Use this to debug under multiple circumstances and to see how your function compares with the par function
With the default seed of 21, the mean for the par function on this is 5.444, and the sd is approximately 3.853.
}
\details{
Your final result will be based on how your function performs on a similar run of 500 games, though with
a different seed used to select them.

While this is dependent on the machine used, we expect your function to be able to run the 500 evaluation games on
the evaluation machine in under 30 seconds. Note that you will need to reuse objects that do not change
from game to game (such as the transition matrix and routing information) in order to achieve this sort
of speed.

The par function takes approximately 3.85 seconds on my laptop. If it takes longer than 30 seconds on the
evaluation machine, the time limit will be increased so as to be 25% slower than the par function.

The mem (memory) object you use in the function you create (see the runWheresCroc documentation)
is passed from game to game. This is so you can reuse whatever you set up there to quickly work out
what moves to make in different situations. Note that it contains a status field that can be used to work out
when a game ends and a new game begins. See the runWheresCroc documentation for more details.
}
